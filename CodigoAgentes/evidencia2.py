# -*- coding: utf-8 -*-
"""Evidencia2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FuU-Qf0S1RhOxPx5DoOvj4dPS14FmElc
"""

#!pip install agentpy pathfinding owlready2

import agentpy as ap
import pathfinding as pf
import matplotlib.pyplot as plt
from owlready2 import *
import itertools
import random
import IPython
import math

onto = get_ontology("file://onto.owl")

onto.destroy(update_relation = True, update_is_a = True)

with onto:
    class Entity(Thing):
      pass

    class Camera(Entity):
      pass

    class StoreObject(Entity):
      pass

    class SecurityGuard(Entity):
      pass

    class Drone(Entity):
      pass

    class Place(Thing):
      pass

    class is_in_place(ObjectProperty):
      domain = [Entity]
      range = [Place]
      pass

    class has_position(ObjectProperty, FunctionalProperty):
      domain = [Entity]
      range = [str]
      pass

    class object_in_store(ObjectProperty):
      domain = [SecurityGuard]
      range = [int]
      pass


    class object_within_reach(ObjectProperty):
      domain = [Drone]
      range = [int]
      pass

class cameraAgent(ap.Agent):

    def see(self, e):
        seeRange = (self.model.p.storeSize[0]//2)-1
        Objects = [a for a in e.neighbors(self, distance=seeRange) if a.agentType == 3]
        objects_info = [{
            "id": obj.id,
            "type": obj.object_is,
            "position": self.model.Store.positions[obj]
            } for obj in Objects]

        return objects_info


    def setup(self):
        self.agentType = 0


    def step(self):
      pass

    def update(self):
        pass

    def end(self):
        pass

class objectAgent(ap.Agent):

    def setup(self):
        self.agentType = 3
        PossibleObjects = ["box", "person", "bottle"]
        self.object_is = random.choice(PossibleObjects)

    def step(self):
        pass

    def update(self):
        pass

    def end(self):
        pass

class securityGuardAgent(ap.Agent):

    def setup(self):
        self.agentType = 1
        self.object_in_store = []

    def step(self):
      pass

    def brf(self,p):
      pass



    def update(self):
        pass

    def end(self):
        pass

class droneAgent(ap.Agent):



  def initBeliefs(self, initPos):
    place = Place(at_position=str(initPos))
    self.this_drone = Drone(is_in_place=[Place()])

  def initIntentions(self):
    self.intentionSucceded = True
    self.I = True


  def setup(self):
    self.agentType = 2
    self.firstStep = True
    self.currentPlan = []

  def step(self):
    pass

  def update(self):
    pass

  def end(self):
    pass
#

class StoreModel(ap.Model):

    def setup(self):
        self.messages = []

        self.objects = ap.AgentList(self, self.p.objects, objectAgent)
        self.cameras = ap.AgentList(self, self.p.cameras, cameraAgent)
        self.securityGuardList = ap.AgentList(self, self.p.securityGuards, securityGuardAgent)
        self.drone = ap.AgentList(self, self.p.drone, droneAgent)

        self.Store = ap.Grid(self, self.p.storeSize, track_empty=True)

        camera_positions = [
            (0, 0),
            (self.p.storeSize[0] - 1, 0),
            (0, self.p.storeSize[1] - 1),
            (self.p.storeSize[0] - 1, self.p.storeSize[1] - 1)
        ]

        drone_position = [
            (self.p.storeSize[0] // 2, self.p.storeSize[1] // 2)
        ]

        while len(self.cameras) > len(camera_positions):
            self.cameras.remove(random.choice(self.cameras))

        while len(self.drone) > len(drone_position):
            self.drone.remove(random.choice(self.drone))

        self.Store.add_agents(self.objects, random=True, empty=True)
        self.Store.add_agents(self.cameras, camera_positions, empty=True)
        self.Store.add_agents(self.drone, drone_position, empty=True)

    def step(self):
        self.objects.step()
        self.cameras.step()
        self.securityGuardList.step()
        self.drone.step()

    def update(self):
        pass

    def end(self):
        pass

#A FUNCTION TO ANIMATE THEE SIMULATION

def animation_plot(model, ax):
    agent_type_grid = model.Store.attr_grid('agentType')
    ap.gridplot(agent_type_grid, cmap='Accent', ax=ax)
    ax.set_title(f"Robot en almacen \n Time-step: {model.t}, ")

#SIMULATION PARAMETERS

#a random variables (0,1)
r = random.random()

#parameters dict
parameters = {
    "cameras" : 4,     #Amount of cameras
    "objects" : 10,      #Amount of objects
    "drone" : 1,      #Amount of drones
    "securityGuards" : 1,      #Security Guard
"storeSize" : (15,15),      #Grid size
    "steps" : 2,          #Max steps
    "seed" : 13*r           #seed for random variables (that is random by itself)
}

#============================================================================0

#SIMULATION:

#Create figure (from matplotlib)
fig, ax = plt.subplots()

#Create model
model = StoreModel(parameters)


#Run with animation
#If you want to run it without animation then use instead:
#model.run()
animation = ap.animate(model, fig, ax, animation_plot)
#This step may take a while before you can see anything

#Print the final animation
IPython.display.HTML(animation.to_jshtml())